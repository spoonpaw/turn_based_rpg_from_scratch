import Phaser from 'phaser';
import PlayerCharacter from '../classes/PlayerCharacter';
import Enemy from '../classes/Enemy';

export default class BattleScene extends Phaser.Scene {
    heroes!: PlayerCharacter[];
    enemies!: Enemy[];
    private units!: (Enemy | PlayerCharacter)[];
    private index!: number;
    constructor() {
        super('Battle');
    }

    create() {

        // set background to blue
        this.cameras.main.setBackgroundColor('rgb(65, 97, 251)');

        // player character - warrior
        const warrior = new PlayerCharacter(this, 700, 155, 'player', 16, 'Warrior', 100, 30);
        this.add.existing(warrior);

        // add second player
        // player character - mage
        const mage = new PlayerCharacter(this, 700, 360, 'player', 19, 'Mage', 80, 8);
        this.add.existing(mage);

        const dragonBlue = new Enemy(this, 125, 100, 'dragonblue', null, 'Dragon', 50, 3);
        this.add.existing(dragonBlue);

        const dragonOrange = new Enemy(this, 125, 300, 'dragonorange', null, 'Dragon2', 50, 3);
        this.add.existing(dragonOrange);

        // array with heroes
        this.heroes = [warrior, mage];

        // array with enemies
        this.enemies = [dragonBlue, dragonOrange];

        // array with both parties, who will attack
        this.units = this.heroes.concat(this.enemies);

        // run ui scene at the same time
        this.scene.launch('BattleUI');

        this.index = -1;
    }

    nextTurn() {
        this.index++;
        // if there are no more units, we start again from the first one
        if (this.index >= this.units.length) {
            this.index = 0;
        }
        if (this.units[this.index]) {
            // if it's a player hero
            if (this.units[this.index] instanceof PlayerCharacter) {
                this.events.emit('PlayerSelect', this.index);
            }
            else { // else if it's an enemy unit
                // pick random hero
                const r = Math.floor(Math.random() * this.heroes.length);
                // call the enemy's attack function
                this.units[this.index].attack(this.heroes[r]);
                // add timer for the next turn to create smooth gameplay
                this.time.addEvent({delay: 3000, callback: this.nextTurn, callbackScope: this});
            }
        }
    }

    receivePlayerSelection(action: string, target: number) {
        if (action === 'attack') {
            this.units[this.index].attack(this.enemies[target]);
        }
        this.time.addEvent({delay: 3000, callback: this.nextTurn, callbackScope: this});
    }
}