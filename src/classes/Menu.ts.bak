import Phaser from 'phaser';
import MenuItem from './MenuItem';
import PlayerCharacter from './PlayerCharacter';
import Unit from './Unit';

export default class Menu extends Phaser.GameObjects.Container {
    private menuItems: MenuItem[];
    protected menuItemIndex: number;
    private heroes: PlayerCharacter[];

    constructor(x, y, scene, heroes) {
        super(scene, x, y);
        this.menuItems = [];
        this.menuItemIndex = 0;
        this.heroes = heroes;
        this.x = x;
        this.y = y;
    }

    addMenuItem(unit) {
        const menuItem = new MenuItem(0, this.menuItems.length * 35, unit, this.scene);
        this.menuItems.push(menuItem);
        this.add(menuItem);
    }

    moveSelectionUp() {
        this.menuItems[this.menuItemIndex].deselect();
        this.menuItemIndex--;
        if (this.menuItemIndex < 0) {
            this.menuItemIndex = this.menuItems.length - 1;
        }
        this.menuItems[this.menuItemIndex].select();
    }

    moveSelectionDown() {
        this.menuItems[this.menuItemIndex].deselect();
        this.menuItemIndex++;
        if (this.menuItemIndex >= this.menuItemIndex) {
            this.menuItemIndex = 0;
        }
        this.menuItems[this.menuItemIndex].select();
    }

    select(index) {
        if (!index) {
            index = 0;
        }
        this.menuItems[this.menuItemIndex].deselect();
        this.menuItemIndex = index;
        this.menuItems[this.menuItemIndex].select();
    }

    deselect() {
        this.menuItems[this.menuItemIndex].deselect();
        this.menuItemIndex = 0;
    }

    confirm() {
        // when the player confirms his selection, do the action
    }

    clear() {
        for (let i = 0; i < this.menuItems.length; i++) {
            this.menuItems[i].destroy();
        }
        this.menuItems.length = 0;
        this.menuItemIndex = 0;
    }

    remap(units: Unit[]) {
        this.clear();
        for (let i = 0; i < units.length; i++) {
            const unit = units[i];
            this.addMenuItem(unit.type);
        }
    }

}